/*
 * Copyright 2025 Firefly Software Solutions Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.firefly.common.auth.session.models;

import lombok.Builder;
import lombok.Data;

import java.time.LocalDateTime;
import java.util.UUID;

/**
 * Core session context containing all session-related information for a customer
 * across the Firefly Core Banking Platform.
 *
 * <p>The SessionContext serves as the central aggregation point for customer session data,
 * providing a unified view of the customer's current state, active contracts, and
 * authorization context. This enables microservices to make informed authorization
 * decisions without requiring multiple API calls.</p>
 *
 * <p><strong>Key Features:</strong></p>
 * <ul>
 *   <li>Centralized customer context aggregation</li>
 *   <li>Contract-based authorization support</li>
 *   <li>Session lifecycle management</li>
 *   <li>Security and audit trail capabilities</li>
 *   <li>Performance optimization through caching</li>
 * </ul>
 *
 * <p><strong>Usage Example:</strong></p>
 * <pre>{@code
 * // Retrieve current session context
 * SessionContext context = sessionManager.getCurrentSession().block();
 *
 * // Check customer's active contracts
 * List<ActiveContract> contracts = context.getCustomerProfile().getActiveContracts();
 *
 * // Validate access to specific product
 * boolean hasAccess = contracts.stream()
 *     .anyMatch(contract -> contract.getActiveProduct().getProductId().equals(productId));
 * }</pre>
 *
 * <p><strong>Thread Safety:</strong> This class is immutable when built and thread-safe
 * for read operations. Use the {@code toBuilder()} method for creating modified copies.</p>
 *
 * @author Firefly Team
 * @since 1.0.0
 * @see CustomerProfile
 * @see SessionStatus
 * @see SessionMetadata
 */
@Data
@Builder(toBuilder = true)
public class SessionContext {

    /**
     * Unique session identifier generated by the session manager.
     *
     * <p>This identifier is used for session tracking, caching, and audit purposes.
     * It should be treated as opaque and not parsed or interpreted by client code.</p>
     */
    private String sessionId;

    /**
     * Party ID extracted from the X-Party-Id header.
     *
     * <p>This is the primary identifier for the customer/party in the system and
     * serves as the key for retrieving customer profile and contract information.
     * All authorization decisions are based on this party's relationships and contracts.</p>
     */
    private UUID partyId;

    /**
     * Comprehensive customer profile information including active contracts.
     *
     * <p>Contains all the customer data necessary for authorization decisions,
     * including party relationships, active contracts, and basic personal information.
     * This data is aggregated from multiple microservices for performance optimization.</p>
     */
    private CustomerProfile customerProfile;

    /**
     * Timestamp when the session was initially created.
     *
     * <p>Used for session lifecycle management, audit trails, and security monitoring.
     * Sessions have a maximum lifetime defined by the session manager configuration.</p>
     */
    private LocalDateTime createdAt;

    /**
     * Timestamp of the last session access or activity.
     *
     * <p>Updated on each session access to support idle timeout functionality.
     * Used in conjunction with session expiration policies to determine session validity.</p>
     */
    private LocalDateTime lastAccessedAt;

    /**
     * Timestamp when the session will expire and become invalid.
     *
     * <p>Calculated based on session creation time, last access time, and configured
     * timeout policies. Sessions are automatically cleaned up after expiration.</p>
     */
    private LocalDateTime expiresAt;

    /**
     * IP address from which the session was initiated.
     *
     * <p>Used for security monitoring, fraud detection, and audit purposes.
     * May be used to detect suspicious activity or session hijacking attempts.</p>
     */
    private String ipAddress;

    /**
     * User agent string from the client application.
     *
     * <p>Provides information about the client application, browser, or device
     * used to access the system. Useful for analytics and security monitoring.</p>
     */
    private String userAgent;

    /**
     * Current status of the session.
     *
     * <p>Indicates whether the session is active, expired, invalidated, or in
     * another state. Used by the session manager to determine session validity.</p>
     *
     * @see SessionStatus
     */
    private SessionStatus status;

    /**
     * Additional session metadata for extensibility.
     *
     * <p>Contains supplementary information that may be needed for specific
     * use cases, such as device fingerprinting, risk scores, or custom attributes.</p>
     *
     * @see SessionMetadata
     */
    private SessionMetadata metadata;
}
